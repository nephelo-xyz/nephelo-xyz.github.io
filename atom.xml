<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nephelo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nephelo-xyz.github.io/"/>
  <updated>2020-07-17T03:40:27.726Z</updated>
  <id>https://nephelo-xyz.github.io/</id>
  
  <author>
    <name>nephelo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kubernetes本地集群搭建</title>
    <link href="https://nephelo-xyz.github.io/2020/04/20/Kubernetes%E6%9C%AC%E5%9C%B0%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>https://nephelo-xyz.github.io/2020/04/20/Kubernetes%E6%9C%AC%E5%9C%B0%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</id>
    <published>2020-04-20T12:46:25.000Z</published>
    <updated>2020-07-17T03:40:27.726Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在着手搭建Kubernetes的集群，确实还挺多问题，所以整理出来记录一下。</p></blockquote><a id="more"></a>        <h2 id="1-版本统一"   >          <a href="#1-版本统一" class="heading-link"><i class="fas fa-link"></i></a>1 版本统一</h2>      <ul><li>Docker 18.09.0</li><li>kubeadm-1.14.0-0 </li><li>kubelet-1.14.0-0 </li><li>kubectl-1.14.0-0<ul><li>k8s.gcr.io/kube-apiserver:v1.14.0</li><li>k8s.gcr.io/kube-controller-manager:v1.14.0</li><li>k8s.gcr.io/kube-scheduler:v1.14.0</li><li>k8s.gcr.io/kube-proxy:v1.14.0</li><li>k8s.gcr.io/pause:3.1</li><li>k8s.gcr.io/etcd:3.3.10</li><li>k8s.gcr.io/coredns:1.3.1</li></ul></li><li>calico:v3.9</li></ul>        <h2 id="2-准备3台centos"   >          <a href="#2-准备3台centos" class="heading-link"><i class="fas fa-link"></i></a>2 准备3台centos</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">01 `搭建前准备`</span><br><span class="line">mkdir D:\VM\k8s-docker-centos7 【创建目录】</span><br><span class="line">cd D:\VM\k8s-docker-centos7 【切换目录】</span><br><span class="line">type nul&gt;Vagrantfile 【创建Vagrantfile文件】</span><br><span class="line">echo [fileContent]&gt;Vagrantfile 【编辑文件】</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">boxes = [</span><br><span class="line">&#123;</span><br><span class="line">:name =&gt; "master-kubeadm-k8s",</span><br><span class="line">:eth1 =&gt; "192.168.31.100",</span><br><span class="line">:mem =&gt; "2048",</span><br><span class="line">:cpu =&gt; "2",</span><br><span class="line">:sshport =&gt; 22230</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">:name =&gt; "worker01-kubeadm-k8s",</span><br><span class="line">:eth1 =&gt; "192.168.31.101",</span><br><span class="line">:mem =&gt; "2048",</span><br><span class="line">:cpu =&gt; "2",</span><br><span class="line">:sshport =&gt; 22231</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">:name =&gt; "worker02-kubeadm-k8s",</span><br><span class="line">:eth1 =&gt; "192.168.31.102",</span><br><span class="line">:mem =&gt; "2048",</span><br><span class="line">:cpu =&gt; "2",</span><br><span class="line">:sshport =&gt; 22232</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">Vagrant.configure(2) do |config|</span><br><span class="line">config.vm.box = "centos/7"</span><br><span class="line">boxes.each do |opts|</span><br><span class="line">config.vm.define opts[:name] do |config|</span><br><span class="line">config.vm.hostname = opts[:name]</span><br><span class="line">config.vm.network :public_network, ip: opts[:eth1]</span><br><span class="line">config.vm.network "forwarded_port", guest: 22, host: 2222, id: "ssh", disabled: "true"</span><br><span class="line">config.vm.network "forwarded_port", guest: 22, host: opts[:sshport]</span><br><span class="line">config.vm.provider "vmware_fusion" do |v|</span><br><span class="line">v.vmx["memsize"] = opts[:mem]</span><br><span class="line">v.vmx["numvcpus"] = opts[:cpu]</span><br><span class="line">end</span><br><span class="line">config.vm.provider "virtualbox" do |v|</span><br><span class="line">v.customize ["modifyvm", :id, "--memory", opts[:mem]]</span><br><span class="line">v.customize ["modifyvm", :id, "--cpus", opts[:cpu]]</span><br><span class="line">v.customize ["modifyvm", :id, "--name", opts[:name]]</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">02 `启动之后进入到对应的centos里面，使得root账户能够登陆，从而使用XShell登陆`</span><br><span class="line">vagrant up [启动虚拟机]</span><br><span class="line">vagrant ssh master-kubeadm-k8s [进入manager-node]</span><br><span class="line">vagrant ssh worker01-kubeadm-k8s [进入worker01-node]</span><br><span class="line">vagrant ssh worker02-kubeadm-k8s [进入worker02-node]</span><br><span class="line">03 `分别登陆三个节点,执行下面操作,改成可以密码登陆root账户`</span><br><span class="line">sudo -i [进入root账户]</span><br><span class="line">vi /etc/ssh/sshd_config [设置root账户可以密码登陆]</span><br><span class="line">修改PasswordAuthentication yes</span><br><span class="line">passwd [修改密码]</span><br><span class="line">systemctl restart sshd [重启sshd服务]</span><br></pre></td></tr></table></div></figure>        <h2 id="3-更新并安装依赖"   >          <a href="#3-更新并安装依赖" class="heading-link"><i class="fas fa-link"></i></a>3 更新并安装依赖</h2>      <blockquote><p>3台机器都需要执行</p></blockquote><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br><span class="line">yum install -y conntrack ipvsadm ipset jq sysstat curl iptables libseccomp</span><br></pre></td></tr></table></div></figure>        <h2 id="4-安装Docker"   >          <a href="#4-安装Docker" class="heading-link"><i class="fas fa-link"></i></a>4 安装Docker</h2>      <blockquote><p>3台机器都需要执行，安装版本为18.09.0</p></blockquote><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">01 `进入虚拟机`</span><br><span class="line">    vagrant ssh [nodeName]</span><br><span class="line">02 `卸载之前安装的docker`</span><br><span class="line">    sudo yum remove docker docker latest docker-latest-logrotate \</span><br><span class="line">    docker-logrotate docker-engine docker-client docker-client-latest docker-common</span><br><span class="line">03 `安装必要依赖`</span><br><span class="line">    sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">04 `添加软件源信息`</span><br><span class="line">    sudo yum-config-manager \</span><br><span class="line">    --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    yum list | grep docker-ce</span><br><span class="line">05 `更新yum缓存`</span><br><span class="line">    sudo yum makecache fast</span><br><span class="line">06 `安装docker`</span><br><span class="line">    sudo yum install -y docker-ce-18.09.0 docker-ce-cli-18.09.0 containerd.io [指定安装docker版本]</span><br><span class="line">07 `启动docker并设置开机启动`</span><br><span class="line">    sudo systemctl start docker &amp;&amp; sudo systemctl enable docker</span><br><span class="line">08 `测试docker安装是否成功`</span><br><span class="line">    sudo docker run hello-world</span><br></pre></td></tr></table></div></figure>        <h2 id="5-修改hosts文件"   >          <a href="#5-修改hosts文件" class="heading-link"><i class="fas fa-link"></i></a>5 修改hosts文件</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">01 `master`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置master的hostname，并且修改hosts文件</span></span><br><span class="line">sudo hostnamectl set-hostname m</span><br><span class="line">02 `两个worker`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置worker01/02的hostname，并且修改hosts文件</span></span><br><span class="line">sudo hostnamectl set-hostname w1</span><br><span class="line">sudo hostnamectl set-hostname w2</span><br><span class="line">03 `三台机器`</span><br><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">192.168.31.100 m</span><br><span class="line">192.168.31.101 w1</span><br><span class="line">192.168.31.102 w2</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">04 `使用ping测试一下`</span><br><span class="line">ping m</span><br><span class="line">ping w1</span><br><span class="line">ping w2</span><br></pre></td></tr></table></div></figure>        <h2 id="6-系统基础前提配置"   >          <a href="#6-系统基础前提配置" class="heading-link"><i class="fas fa-link"></i></a>6 系统基础前提配置</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">01 `关闭防火墙`</span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line">02 `关闭selinux`</span><br><span class="line">setenforce 0</span><br><span class="line">sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config</span><br><span class="line">03 `关闭swap`</span><br><span class="line">swapoff -a</span><br><span class="line">sed -i '/swap/s/^\(.*\)$/#\1/g' /etc/fstab</span><br><span class="line">04 `配置iptables的ACCEPT规则`</span><br><span class="line">iptables -F &amp;&amp; iptables -X &amp;&amp; iptables \</span><br><span class="line">    -F -t nat &amp;&amp; iptables -X -t nat &amp;&amp; iptables -P FORWARD ACCEPT</span><br><span class="line">05 `设置系统参数`</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br></pre></td></tr></table></div></figure>        <h2 id="7-Installing-kubeadm-kubelet-and-kubectl"   >          <a href="#7-Installing-kubeadm-kubelet-and-kubectl" class="heading-link"><i class="fas fa-link"></i></a>7 Installing kubeadm, kubelet and kubectl</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">01 `配置yum源`</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">02 `安装kubeadm&amp;kubelet&amp;kubectl`</span><br><span class="line">yum install -y kubeadm-1.14.0-0 kubelet-1.14.0-0 kubectl-1.14.0-0</span><br><span class="line">03 `docker和k8s设置同一个cgroup`</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker</span></span><br><span class="line">vi /etc/docker/daemon.json 【文件没内容的话，就新建；有的话，就加上这一句，注意文件的格式[逗号]】</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">&#123;</span><br><span class="line">"exec-opts": ["native.cgroupdriver=systemd"]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================  </span></span><br><span class="line">systemctl restart docker 【`重启docker，一定要执行`】</span><br><span class="line"><span class="meta">#</span><span class="bash"> kubelet</span></span><br><span class="line">sed -i "s/cgroup-driver=systemd/cgroup-driver=cgroupfs/g" /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 【`找不到内容没关系`】</span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet 【`重启kubelet，一定要执行`】</span><br></pre></td></tr></table></div></figure>        <h2 id="8-proxy-pause-scheduler等国内镜像"   >          <a href="#8-proxy-pause-scheduler等国内镜像" class="heading-link"><i class="fas fa-link"></i></a>8 proxy/pause/scheduler等国内镜像</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">01 `查看kubeadm使用的镜像`</span><br><span class="line">kubeadm config images list</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">k8s.gcr.io/kube-apiserver:v1.14.0</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.14.0</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.14.0</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.14.0</span><br><span class="line">k8s.gcr.io/pause:3.1</span><br><span class="line">k8s.gcr.io/etcd:3.3.10</span><br><span class="line">k8s.gcr.io/coredns:1.3.1</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">02 `解决国外镜像不能访问的问题`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建kubeadm.sh脚本，用于拉取镜像/打tag/删除原有镜像</span></span><br><span class="line">vi kubeadm.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">set -e</span><br><span class="line">KUBE_VERSION=v1.14.0</span><br><span class="line">KUBE_PAUSE_VERSION=3.1</span><br><span class="line">ETCD_VERSION=3.3.10</span><br><span class="line">CORE_DNS_VERSION=1.3.1</span><br><span class="line">GCR_URL=k8s.gcr.io</span><br><span class="line">ALIYUN_URL=registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">images=(kube-proxy:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-scheduler:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-controller-manager:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-apiserver:$&#123;KUBE_VERSION&#125;</span><br><span class="line">pause:$&#123;KUBE_PAUSE_VERSION&#125;</span><br><span class="line">etcd:$&#123;ETCD_VERSION&#125;</span><br><span class="line">coredns:$&#123;CORE_DNS_VERSION&#125;)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">docker pull $ALIYUN_URL/$imageName</span><br><span class="line">docker tag  $ALIYUN_URL/$imageName $GCR_URL/$imageName</span><br><span class="line">docker rmi $ALIYUN_URL/$imageName</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">03 `运行脚本和查看镜像`</span><br><span class="line">sh ./kubeadm.sh 【运行脚本】</span><br><span class="line">docker images 【查看镜像】</span><br><span class="line">04 `将这些镜像推送到自己的阿里云仓库`【可选，根据自己实际的情况】</span><br><span class="line">docker login --username=happyeveryday2019 registry.cn-hangzhou.aliyuncs.com 【登录自己的阿里云仓库，master节点执行即可】 </span><br><span class="line">密码：******</span><br><span class="line">vi kubeadm-push-aliyun.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">set -e</span><br><span class="line">KUBE_VERSION=v1.14.0</span><br><span class="line">KUBE_PAUSE_VERSION=3.1</span><br><span class="line">ETCD_VERSION=3.3.10</span><br><span class="line">CORE_DNS_VERSION=1.3.1</span><br><span class="line">GCR_URL=k8s.gcr.io</span><br><span class="line">ALIYUN_URL=registry.cn-hangzhou.aliyuncs.com/841863085</span><br><span class="line">images=(kube-proxy:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-scheduler:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-controller-manager:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-apiserver:$&#123;KUBE_VERSION&#125;</span><br><span class="line">pause:$&#123;KUBE_PAUSE_VERSION&#125;</span><br><span class="line">etcd:$&#123;ETCD_VERSION&#125;</span><br><span class="line">coredns:$&#123;CORE_DNS_VERSION&#125;)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">docker tag $GCR_URL/$imageName $ALIYUN_URL/$imageName</span><br><span class="line">docker push $ALIYUN_URL/$imageName</span><br><span class="line">docker rmi $ALIYUN_URL/$imageName</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">06 `运行脚本`</span><br><span class="line">sh ./kubeadm-push-aliyun.sh</span><br></pre></td></tr></table></div></figure>        <h2 id="9-kube-init初始化master"   >          <a href="#9-kube-init初始化master" class="heading-link"><i class="fas fa-link"></i></a>9 kube init初始化master</h2>      <blockquote><p><strong>官网：</strong> <span class="exturl"><a class="exturl__link"   href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/"  target="_blank" rel="noopener">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>        <h3 id="9-1-初始化master节点"   >          <a href="#9-1-初始化master节点" class="heading-link"><i class="fas fa-link"></i></a>9.1  初始化master节点</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">01 `初始化master节点`</span><br><span class="line">kubeadm reset 【初始化集群状态】</span><br><span class="line">kubeadm init --kubernetes-version=1.14.0 \</span><br><span class="line">    --apiserver-advertise-address=192.168.31.100 \</span><br><span class="line">    --pod-network-cidr=10.244.0.0/16 【初始化master节点】</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：记得保存好最后kubeadm join的信息。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.31.100:6443 --token fag134.3wot9edrvs82vh6d \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:1df02a06552c02ba0e28e00c80a50e9ff40da81a4cdd53c136a16d3c0233f450</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">02 `根据日志提示执行`</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line">03 `查看pod`</span><br><span class="line">等待一会儿，同时可以发现像etcd，controller，scheduler等组件都以pod的方式安装成功了</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：coredns没有启动，需要安装网络插件</span></span><br><span class="line">kubectl get pods -n kube-system 【查看kube-system的pods】</span><br><span class="line">kubectl get pods --all-namespaces 【查看所有pods】</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-fb8b8dccf-f7g6g     0/1     Pending   0          7m30s</span><br><span class="line">coredns-fb8b8dccf-hx765     0/1     Pending   0          7m30s</span><br><span class="line">etcd-m                      1/1     Running   0          6m30s</span><br><span class="line">kube-apiserver-m            1/1     Running   0          6m36s</span><br><span class="line">kube-controller-manager-m   1/1     Running   0          6m42s</span><br><span class="line">kube-proxy-w9m72            1/1     Running   0          7m30s</span><br><span class="line">kube-scheduler-m            1/1     Running   0          6m24s</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">04 `健康检查`</span><br><span class="line">curl -k https://localhost:6443/healthz</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">[root@master-kubeadm-k8s ~]# curl -k https://localhost:6443/healthz</span><br><span class="line">ok</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br></pre></td></tr></table></div></figure>        <h3 id="9-2-kube-init流程-？？？？？"   >          <a href="#9-2-kube-init流程-？？？？？" class="heading-link"><i class="fas fa-link"></i></a>9.2 kube init流程 ？？？？？</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">01 `进行一系列检查，以确定这台机器可以部署kubernetes`</span><br><span class="line">02 `生成kubernetes对外提供服务所需要的各种证书可对应目录`</span><br><span class="line">/etc/kubernetes/pki/*</span><br><span class="line">03 `为其他组件生成访问kube-ApiServer所需的配置文件`</span><br><span class="line">ls /etc/kubernetes/</span><br><span class="line">    admin.conf  controller-manager.conf  kubelet.conf  scheduler.conf</span><br><span class="line">04 `为 Master组件生成Pod配置文件`</span><br><span class="line">    ls /etc/kubernetes/manifests/*.yaml</span><br><span class="line">    kube-apiserver.yaml </span><br><span class="line">    kube-controller-manager.yaml</span><br><span class="line">    kube-scheduler.yaml</span><br><span class="line">05 `生成etcd的Pod YAML文件`</span><br><span class="line">    ls /etc/kubernetes/manifests/*.yaml</span><br><span class="line">    kube-apiserver.yaml </span><br><span class="line">    kube-controller-manager.yaml</span><br><span class="line">    kube-scheduler.yaml</span><br><span class="line">etcd.yaml</span><br><span class="line">06 `一旦这些 YAML文件出现在被 kubelet监视的/etc/kubernetes/manifests/目录下，kubelet就会自动创建这些yaml文件定义的pod，即master组件的容器。master容器启动后，kubeadm会通过检查localhost:443/healthz这个master组件的健康状态检查URL，等待master组件完全运行起来`</span><br><span class="line">07 `为集群生成一个bootstrap token`</span><br><span class="line">08 `将ca.crt等Master节点的重要信息，通过ConfigMap的方式保存在etcd中，工后续部署node节点使用`</span><br><span class="line">09 `最后一步是安装默认插件，kubernetes默认kube-proxy和DNS两个插件是必须安装的`</span><br></pre></td></tr></table></div></figure>        <h2 id="10-部署calico网络插件"   >          <a href="#10-部署calico网络插件" class="heading-link"><i class="fas fa-link"></i></a>10 部署calico网络插件</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 选择网络插件</span></span><br><span class="line">https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"><span class="meta">#</span><span class="bash"> calico网络插件</span></span><br><span class="line">https://docs.projectcalico.org/v3.9/getting-started/kubernetes/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：calico，同样在master节点上操作</span></span><br><span class="line">01 `可以先手动pull一下` 【可能拉取较慢】</span><br><span class="line">curl https://docs.projectcalico.org/v3.9/manifests/calico.yaml | grep image 【版本会变化，需要根   据实际情况拉取镜像】</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">      image: calico/cni:v3.9.3</span><br><span class="line">          image: calico/pod2daemon-flexvol:v3.9.3</span><br><span class="line">          image: calico/node:v3.9.3</span><br><span class="line">          image: calico/kube-controllers:v3.9.3</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">docker pull calico/cni:v3.9.3</span><br><span class="line">    docker pull calico/pod2daemon-flexvol:v3.9.3</span><br><span class="line">    docker pull calico/node:v3.9.3</span><br><span class="line">    docker pull calico/kube-controllers:v3.9.3</span><br><span class="line">    `官方镜像拉取太慢，可以用itcrazy`</span><br><span class="line">    docker pull registry.cn-hangzhou.aliyuncs.com/itcrazy2016/kube-controllers:v3.9.3</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/itcrazy2016/cni:v3.9.3</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/itcrazy2016/pod2daemon-flexvol:v3.9.3</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/itcrazy2016/node:v3.9.3</span><br><span class="line">`打tag`</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/itcrazy2016/kube-controllers:v3.9.3 \</span><br><span class="line">    calico/kube-controllers:v3.9.3</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/itcrazy2016/cni:v3.9.3 \</span><br><span class="line">    calico/cni:v3.9.3</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/itcrazy2016/pod2daemon-flexvol:v3.9.3 \</span><br><span class="line">    calico/pod2daemon-flexvol:v3.9.3</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/itcrazy2016/node:v3.9.3 \</span><br><span class="line">    calico/node:v3.9.3</span><br><span class="line">`删除registry.cn-hangzhou.aliyuncs.com/itcrazy2016/格式的镜像` </span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：打tag不会改变imageId，会删除calico的镜像  </span></span><br><span class="line">docker rmi -f $(docker images registry.cn-hangzhou.aliyuncs.com/itcrazy2016/* -aq)</span><br><span class="line">02 `在k8s中安装calico`</span><br><span class="line">yum install -y wget</span><br><span class="line">wget https://docs.projectcalico.org/v3.9/manifests/calico.yaml</span><br><span class="line">`最新版本已经是3.9.5 需要更改为 3.9.3`</span><br><span class="line">sed -i "s/v3.9.5/v3.9.3/g" calico.yaml</span><br><span class="line">kubectl apply -f calico.yaml</span><br><span class="line">03 `确认一下calico是否安装成功`</span><br><span class="line">kubectl get pods --all-namespaces -w 【实时查看所有的Pods】</span><br><span class="line">04 `删除一个pod 【如有需要的话】`</span><br><span class="line">kubectl delete pod $podName --grace-period=0 --force -n $namespaceName</span><br></pre></td></tr></table></div></figure>        <h2 id="11-kube-join"   >          <a href="#11-kube-join" class="heading-link"><i class="fas fa-link"></i></a>11 kube join</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">01 记得保存初始化master节点的最后打印信息【注意这边大家要自己的，下面我的只是一个参考】</span><br><span class="line">kubeadm join 192.168.31.100:6443 --token fag134.3wot9edrvs82vh6d \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:1df02a06552c02ba0e28e00c80a50e9ff40da81a4cdd53c136a16d3c0233f450【worker上面执行】</span><br><span class="line">02 在master节点上检查集群信息</span><br><span class="line">kubectl get nodes</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">NAME                   STATUS   ROLES    AGE     VERSION</span><br><span class="line">master-kubeadm-k8s     Ready    master   19m     v1.14.0</span><br><span class="line">worker01-kubeadm-k8s   Ready    &lt;none&gt;   3m6s    v1.14.0</span><br><span class="line">worker02-kubeadm-k8s   Ready    &lt;none&gt;   2m41s   v1.14.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br></pre></td></tr></table></div></figure>        <h2 id="12-再次体验Pod"   >          <a href="#12-再次体验Pod" class="heading-link"><i class="fas fa-link"></i></a>12 再次体验Pod</h2>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">01 `定义pod.yml文件，比如pod_nginx_rs.yaml` 【不能使用tab，只能用空格】</span><br><span class="line">mkdir pod_nginx_rs</span><br><span class="line">cd pod_nginx_rs</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">cat &gt; pod_nginx_rs.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: ReplicaSet</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">    tier: frontend</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      tier: frontend</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx</span><br><span class="line">      labels:</span><br><span class="line">        tier: frontend</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">02 `根据pod_nginx_rs.yml文件创建pod`</span><br><span class="line">kubectl apply -f pod_nginx_rs.yaml</span><br><span class="line">03 `查看pod`</span><br><span class="line">    kubectl get pods</span><br><span class="line">    kubectl get pods -o wide</span><br><span class="line">    kubectl describe pod nginx</span><br><span class="line">04 `感受通过rs将pod扩容`</span><br><span class="line">kubectl scale rs nginx --replicas=5</span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">05 `删除pod`</span><br><span class="line">kubectl delete -f pod_nginx_rs.yaml</span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近在着手搭建Kubernetes的集群，确实还挺多问题，所以整理出来记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="Devops" scheme="https://nephelo-xyz.github.io/tags/Devops/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot自动装配机制</title>
    <link href="https://nephelo-xyz.github.io/2019/12/14/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%9C%BA%E5%88%B6/"/>
    <id>https://nephelo-xyz.github.io/2019/12/14/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%9C%BA%E5%88%B6/</id>
    <published>2019-12-14T12:46:25.000Z</published>
    <updated>2020-08-07T07:14:13.017Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot为什么会出现？说白了还是觉得Spring不够方便不够简化。SpringBoot一个脚手架让你一分钟就生成一个web项目</p><p>为什么会这么快？为什么连基础配置都不需要？</p><a id="more"></a>        <h2 id="SpringBoot自动装配如何实现的？"   >          <a href="#SpringBoot自动装配如何实现的？" class="heading-link"><i class="fas fa-link"></i></a>SpringBoot自动装配如何实现的？</h2>              <h3 id="SpringBoot"   >          <a href="#SpringBoot" class="heading-link"><i class="fas fa-link"></i></a>- SpringBoot</h3>      <blockquote><p>SpringBoot中的 @Configuration和@Bean 大家都很熟悉，标注此类是一个注解类，提示Spring扫描的作用。</p><p>那么如果我有这样一个诉求：</p><ol><li>我有100个@Configuration类</li><li>我某个模块需要让其中50个类 注入Spring中，该怎么操作？</li></ol></blockquote>        <h3 id="SpringBoot自动注入"   >          <a href="#SpringBoot自动注入" class="heading-link"><i class="fas fa-link"></i></a>- SpringBoot自动注入</h3>      <ol><li><p>从<code>@SpringBootApplication</code>入手，可以看见此注解是一个复合注解。其中<code>@SpringBootConfiguration</code>是继承<code>@Configuration</code>，所以这个注解我们可以知道他的大概作用，还有另一个注解</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">@<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;&#125;</span><br></pre></td></tr></table></div></figure><p><code>@EnableAutoConfiguration</code>中有<code>@AutoConfigurationPackage</code>和<code>@Import</code>注解，<code>@AutoConfigurationPackage</code>注解是自动获取注册Package列表，下来我们看<code>@import(AutoConfigurationImportSelector.class)</code>的注解</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></div></figure><blockquote><p><code>@Import</code> 注解可以配置三种不同的 class</p><ol><li>基于普通 bean 或者带有<code>@Configuration</code> 的 <code>@bean</code> 进行注入</li><li>实现 <code>ImportSelector</code> 接口进行动态注入</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过实现selectImports方法，返回需要注入的ClassName即可实现动态注入。</span></span><br><span class="line">String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br></pre></td></tr></table></div></figure><ol start="3"><li>实现 <code>ImportBeanDefinitionRegistrar</code> 接口进行动态注入  </li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过实现registerBeanDefinitions方法，将需要返回的ClassName[]塞给registry即可实现动态注入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span></span>;</span><br></pre></td></tr></table></div></figure></blockquote><p><code>AutoConfigurationImportSelector</code>这个类实现了<code>ImportSelector</code>类。</p></li><li><p>所以说实现<code>ImportSelector</code>就可以进行注入Spring，返回的<code>String[]</code>就是需要注入Spring的Bean的ClassName，那么我们可以想想，返回一个<code>String[]</code>数组的ClassNme，我们可不可以定义到一个配置文件中呢？配置文件我们可以这样配置 <code>key:ClassName[]</code>，key就是要满足的条件（一个注解类，只要注解了key注解类），即获取其中的<code>ClassName[]</code>，然后返回给Spring动态注入。这样不就方便管理了吗？</p><blockquote><p>SpringBoot就是这么操作的，SpringBoot定义了<code>spring.factories</code>文件，默认放在项目的<code>\resources\META-INF\spring.factories</code>，SpringBoot加载所有项目下的spring.factories，将同一key的value[]整合，然后去重，然后去除<code>@exclude</code>注解过滤的类，剩余类全部注入。</p><p>==我们怎么使用？==</p><p>我们可以在自己的项目<code>\resources\META-INF\</code>目录下建立<code>spring.factories</code>文件，按照SpringBoot中的格式。加入自己定义的<code>@Configuration</code>类即可实现Spring自动装配。</p><figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>= <span class="string">\</span></span><br><span class="line">  com.nephelo.commons.tool.redisconfig.RedissonAutoConfiguration,\</span><br><span class="line">  <span class="attr">com.nephelo.commons.tool.zookeeperConfig.ZookeeperAutoConfiguration</span></span><br></pre></td></tr></table></div></figure><p>如果是自己定义的注解类(一般不建议)，我们需要实现<code>ImportBeanDefinitionRegistrar</code>或者<code>ImportSelector</code>在此注解上加上<code>@Import(AutoConfigurationImportSelector.class)</code>或者<code>import(ImportSelector.class)</code>即可。</p></blockquote></li><li><p>自动装配的条件注解<code>@Conditional xxx</code></p><blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnClass</span>  <span class="comment">//当有某个class的时候加载</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>   <span class="comment">//当有某个bean的时候加载</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingClass</span>  <span class="comment">//当不存在某个class的时候加载</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>   <span class="comment">//当不存在某个bean的时候加载</span></span><br><span class="line">...</span><br></pre></td></tr></table></div></figure></blockquote></li></ol><ul><li><p>为什么？我们依赖一个<code>starter</code>就可以自动装配</p><blockquote><p>就是因为Starter的jar包中，就会配置上面的自动装配装配，实现自动注入</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SpringBoot为什么会出现？说白了还是觉得Spring不够方便不够简化。SpringBoot一个脚手架让你一分钟就生成一个web项目&lt;/p&gt;
&lt;p&gt;为什么会这么快？为什么连基础配置都不需要？&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="SpringBoot" scheme="https://nephelo-xyz.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的事务和ACID实现原理</title>
    <link href="https://nephelo-xyz.github.io/2019/12/13/MySQL%E5%AE%9E%E7%8E%B0ACID%E5%8E%9F%E7%90%86/"/>
    <id>https://nephelo-xyz.github.io/2019/12/13/MySQL%E5%AE%9E%E7%8E%B0ACID%E5%8E%9F%E7%90%86/</id>
    <published>2019-12-13T12:46:25.000Z</published>
    <updated>2020-08-07T06:23:00.492Z</updated>
    
    <content type="html"><![CDATA[        <h3 id="ACID"   >          <a href="#ACID" class="heading-link"><i class="fas fa-link"></i></a>ACID</h3>      <p>ACID我们大家都知道，面试官也经常问到：</p><p>不就是 原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation)、持久性(Durability) 嘛！</p><a id="more"></a>        <h4 id="三大读取问题"   >          <a href="#三大读取问题" class="heading-link"><i class="fas fa-link"></i></a>三大读取问题</h4>      <ol><li><strong>脏读(P1)</strong> ： 读取到别的事务修改的数据，但是别的事务未结束，也就是没有commit或者回滚。</li><li><strong>不可重复读(P2)</strong>：读取到别的事务修改的数据（或者删除的数据），但是别的事务已经commit。</li><li><strong>幻读(P3)</strong>：读取到别的事务增加的数据，并且已经提交。</li></ol><ul><li>其实都是读一致性问题</li></ul>        <h4 id="数据一致性标准（SQL92-ANSI-ISO）"   >          <a href="#数据一致性标准（SQL92-ANSI-ISO）" class="heading-link"><i class="fas fa-link"></i></a>数据一致性标准（SQL92 ANSI/ISO）</h4>      <p>在<span class="exturl"><a class="exturl__link"   href="http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt"  target="_blank" rel="noopener">http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> SQL92标准中，是如下定义的：</p><ol><li><strong>未提交读</strong>(Read Uncommitted)：事务未提交的数据其他事务可见，解决P1</li><li><strong>已提交读</strong>(Read Committed)：事务只能读取别的事务提交后的数据，解决P2</li><li><strong>可重复度</strong>(Repeatable Read)：同一个事务中可以多次读取同样的数据 是一样的。<ul><li>SQL92官方未提出可以解决P3，但是在innodb中，不可能出现P3（==MySQL官网==）</li></ul></li><li><strong>串行化</strong>(Serializable)：串行方式执行事务。解决P1P2P3</li></ol>        <h3 id="两大实现方案"   >          <a href="#两大实现方案" class="heading-link"><i class="fas fa-link"></i></a>两大实现方案</h3>      <p>如果要解决读一致问题，保证一个事务前后两次读取数据一致，该怎么做？在MySQL中用以下两种方案实现</p>        <h4 id="1-LBCC"   >          <a href="#1-LBCC" class="heading-link"><i class="fas fa-link"></i></a>1. LBCC</h4>      <p><strong>Lock Based Concurrency Control</strong>：这种方案是基于锁的并发控制</p>        <h5 id="1-1-锁的种类"   >          <a href="#1-1-锁的种类" class="heading-link"><i class="fas fa-link"></i></a>1.1 锁的种类</h5>      <p><strong>行锁：</strong>行级别的锁</p><p><strong>表锁：</strong>锁住一张表</p><p><strong>共享锁：</strong>也叫<strong>读锁</strong>，我们获取了 一行数据的读锁以后，可以用来读取数据，所以它也叫做读锁</p><blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 我们可用以下方式加上读锁 </span></span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span>;</span><br></pre></td></tr></table></div></figure><p>注意在加上了读锁以后是可以去写数据的，但是很可能会造成死锁。</p><p>释放锁有两种方式，只要事务结束，锁就会自动事务，包括提交事务和结束事务。</p></blockquote><p><strong>排它锁：</strong>也叫<strong>写锁</strong>，只要一个事务获取了一行数据的排它锁，其他的事务就不能再获取这一行数据的共享锁和排它锁。 </p><blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 我们可以加上FOR UPDATE的方式，给select加上排它锁</span></span><br><span class="line"><span class="keyword">SELECT</span> .... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span></span><br></pre></td></tr></table></div></figure></blockquote><p><strong>意向锁：</strong>这个锁我们好像很陌生，也从来没用过？那这个锁是干什么的呢？其实它是由数据库自己维护，也就是说，当我们在给一行数据加上共享锁时，数据会自动给这张表加上意向共享锁；当我们在给一行数据加上排它锁时，数据会自动给这张表加上意向排它锁。</p><p>反过来说： 如果一张表上面至少有一个意向共享锁，说明有其他的事务给其中的某些数据行加 上了共享锁。 如果一张表上面至少有一个意向排他锁，说明有其他的事务给其中的某些数据行加 上了排他锁。</p><p>那这个锁有什么意义呢？</p><blockquote><ol><li>在我们给在某个表加上表锁时，他会怎么操作呢？他会首先扫描表中所有的行，如果某个行被加了行锁，那么就不允许在加表锁了，在大数据量时效率肯定会很低。如果有意向锁就不一样了，他就可以直接判断这个表是否有意向锁的存在，如果有那就说明有人使用行锁中。</li><li>这样以来，InnoDB就实现了表锁和行锁两个级别。虽然表锁只是一种标志的感觉。<em>注：MyISAM只支持表锁</em> </li></ol></blockquote>        <h5 id="1-2-锁的原理"   >          <a href="#1-2-锁的原理" class="heading-link"><i class="fas fa-link"></i></a>1.2 锁的原理</h5>      <p>一个锁他到底锁住了什么？我们知道Java锁会在对象头中标识，那么MySQL是不是也在头中呢？</p><blockquote><p>验证：</p><ol><li>我们先来看一下 t1 的表结构，它有两个字段，int 类型的 id 和 varchar 类型的 name。 里面有 4 条数据，1、2、3、4。</li></ol><div class="table-container"><table><thead><tr><th>transaction1</th><th>transaction2</th></tr></thead><tbody><tr><td>begin;</td><td></td></tr><tr><td>SELECT * FROM t1 WHERE id =1 FOR UPDATE;</td><td></td></tr><tr><td></td><td>select * from t1 where id=3 for update; –阻塞</td></tr><tr><td></td><td>INSERT INTO <code>t1</code> (<code>id</code>, <code>name</code>) VALUES (5, ‘5’); –阻塞</td></tr></tbody></table></div><p>为什么加了 id = 1的行锁， id=3和id=5的查询和插入都被阻塞了呢？难道是加了表锁？</p><ol start="2"><li>我们看一下 t2 的表结构。字段是一样的，不同的地方是 id 上创建了一个<code>主键索引</code>。 里面的数据是 1、4、7、10</li></ol><div class="table-container"><table><thead><tr><th>transaction1</th><th>transaction2</th></tr></thead><tbody><tr><td>begin;</td><td></td></tr><tr><td>select * from t2 where id=1 for update;</td><td></td></tr><tr><td></td><td>select * from t2 where id=1 for update; //阻塞</td></tr><tr><td></td><td>select * from t2 where id=4 for update; // OK</td></tr></tbody></table></div><p>可以看出使用不同<code>主键ID</code>是可以查询的</p></blockquote><blockquote><p><font color='red'>结论：</font></p><p>1）如果我们定义了主键(PRIMARY KEY)，那么 InnoDB 会选择主键作为聚集索引。 </p><p>2）如果没有显式定义主键，则 InnoDB 会选择第一个不包含有 NULL 值的唯一索 引作为主键索引。 </p><p>3）如果也没有这样的唯一索引，则 InnoDB 会选择内置 6 字节长的 ROWID 作为隐藏的聚集索引，它会随着行记录的写入而主键递增。</p><p>所以，为什么锁表，是因为查询没有使用索引，会进行全表扫描，然后把每一个隐 藏的聚集索引都锁住了。</p></blockquote><blockquote><p>问题1：</p><p>为什么通过唯一索引加上行锁，主键索引也会被锁住？</p><p>在InnoDB中主键索引是聚集索引，唯一索引就是辅助索引。我们知道辅助索引的检索流程，在辅助索引的叶子节点存的是聚集索引的索引ID，所以还会再次检索聚集索引的树才能找到文件。所以当找到聚集索引之后肯定会锁起来。</p></blockquote>        <h5 id="1-3-锁的算法"   >          <a href="#1-3-锁的算法" class="heading-link"><i class="fas fa-link"></i></a>1.3 锁的算法</h5>      <p><strong>记录锁</strong>：</p><p>当我们对于唯一性的索引（包括唯一索引和主键索引）使用等值查询，精准匹配到一条记录的时候，这个时候使用的就是记录锁。会只锁住当前的记录(record)</p><p><strong>间隙锁：</strong></p><p>当我们查询的记录不存在，没有命中任何一个 record，无论是用等值查询还是范围查询的时候，它使用的都是间隙锁。</p><blockquote><p>举个例子：我们的表中主键现在有 1 ，4，7，10，当我们执行<code>where id = 6</code>的时候，查询记录不存在，就会使用间隙锁。除了主键，外键和唯一性检查会加间隙锁。</p><p>关闭间隙锁：首先把事务级别设置为RC，并把 innodb_locks_unsafe_for_binlog 设置为 ON。</p></blockquote><p><strong>临键锁：</strong></p><blockquote><p> 不仅仅命中了 Record 记录，还包含了 Gap间隙，在这种情况下我们使用的就是临键锁，它是 MySQL 里面默认的行锁算法，相当于记录锁加上间隙锁。唯一性索引，等值查询匹配到一条记录的时候，退化成记录锁</p></blockquote><blockquote><p>举个例子：我们的表中主键现在有 1 ，4，7，10，当我们执行<code>where id &gt; 5 and id &lt; 9</code>的时候，查询记录就存在一个record 7</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t2 <span class="keyword">where</span> <span class="keyword">id</span> &gt;<span class="number">5</span> <span class="keyword">and</span> <span class="keyword">id</span> &lt;=<span class="number">7</span> <span class="keyword">for</span> <span class="keyword">update</span>; <span class="comment">-- 锁住(4,7]和(7,10]</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t2 <span class="keyword">where</span> <span class="keyword">id</span> &gt;<span class="number">8</span> <span class="keyword">and</span> <span class="keyword">id</span> &lt;=<span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span>; <span class="comment">-- 锁住 (7,10]，(10,+∞)</span></span><br></pre></td></tr></table></div></figure><p>为什么要锁住下一个左开右闭的区间？——就是为了解决幻读的问题。 </p></blockquote>        <h4 id="2-MVCC"   >          <a href="#2-MVCC" class="heading-link"><i class="fas fa-link"></i></a>2.MVCC</h4>      <p><strong>Multi Version Concurrency Control</strong>：使用多版本的并发控制</p><p>​    <strong>mvcc的实现原理</strong>：</p><ul><li><p>一个事务在一时间点读取，会把当前数据生成快照。</p></li><li><p>innodb中快照会有两个标识，一个是（DB_TRX_ID）事务ID（==也可以理解为快照版本==），一个是（DB_ROLL_PTR）回滚指针。</p></li><li><p>事务1读取数据</p><blockquote><p>读取数据，只会读取<strong>DB_TRX_ID小于等于当前事务ID的数据和DB_ROLL_PTR大于当前事务ID</strong>的数据。</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></div></figure></blockquote><div class="table-container"><table><thead><tr><th>ID</th><th>name</th><th>DB_TRX_ID</th><th>DB_ROLL_PTR</th></tr></thead><tbody><tr><td>1</td><td>jack</td><td>1</td><td>undefined</td></tr><tr><td>2</td><td>tom</td><td>1</td><td>undefined</td></tr></tbody></table></div><p><em>– 此时为初始状态</em></p></li><li><p>事务2删除数据，会更新DB_ROLL_PTR的值为事务DB_TRX_ID+1</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//现在事务ID为2的事务 删除jack这个数据</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> =<span class="number">1</span></span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th>ID</th><th>name</th><th>DB_TRX_ID</th><th>DB_ROLL_PTR</th></tr></thead><tbody><tr><td>1</td><td>jack</td><td>1</td><td><font color='red'>2</font></td></tr><tr><td>2</td><td>tom</td><td>1</td><td>undefined</td></tr></tbody></table></div><p><em>所以不影响 事务1 读取的数据</em></p></li><li><p>事务3插入一条数据，此时快照中的变化。</p><blockquote><p>插入数据会创建DB_TRX_ID为当前事务ID、DB_ROLL_PTR为undefined的数据。</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span> (<span class="number">3</span>,<span class="string">'jerry'</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th>ID</th><th>name</th><th>DB_TRX_ID</th><th>DB_ROLL_PTR</th></tr></thead><tbody><tr><td>1</td><td>jack</td><td>1</td><td>2</td></tr><tr><td>2</td><td>tom</td><td>1</td><td>undefined</td></tr><tr><td>3</td><td>jerry</td><td><font color='red'> 3</font></td><td>undefined</td></tr></tbody></table></div></li><li><p>事务1第二次查询</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th>ID</th><th>name</th><th>DB_TRX_ID</th><th>DB_ROLL_PTR</th></tr></thead><tbody><tr><td>1</td><td>jack</td><td>1</td><td>2</td></tr><tr><td>2</td><td>tom</td><td>1</td><td>undefined</td></tr></tbody></table></div><p><strong>DB_TRX_ID小于等于当前事务ID的数据和DB_ROLL_PTR大于当前事务ID</strong></p></li><li><p>事务4更新一数据</p><blockquote><p>更新数据会使快照创建出一条ID相同的更新后的数据，事务ID为删除事务的事务ID，DB_ROLL_PTR为null。并且更新源数据行的DB_ROLL_PTR为，更新操作事务ID+1</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//现在事务ID为3的事务更新了 jack这个数据</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'pengyuyan'</span> <span class="keyword">where</span> <span class="keyword">id</span> =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th>ID</th><th>name</th><th>DB_TRX_ID</th><th>DB_ROLL_PTR</th></tr></thead><tbody><tr><td>1</td><td>jack</td><td>1</td><td><font color='red'>4</font></td></tr><tr><td>2</td><td>tom</td><td>1</td><td>undefined</td></tr><tr><td>3</td><td>jerry</td><td>3</td><td>undefined</td></tr><tr><td>1</td><td>pengyuyan</td><td><font color='red'>4</font></td><td>undefined</td></tr></tbody></table></div><p><em>也不影响 事务1读取的数据，现在的第一条数据叫做 undolog</em></p></li></ul>        <h4 id="默认开启增删改事务"   >          <a href="#默认开启增删改事务" class="heading-link"><i class="fas fa-link"></i></a>默认开启增删改事务</h4>      <figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global VARIABLES like &#39;autocommit&#39;; &#x2F;&#x2F;默认为ON的时候 增删改都会自动开启和关闭事务</span><br></pre></td></tr></table></div></figure>        <h3 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a>总结</h3>              <h4 id="原子性的实现："   >          <a href="#原子性的实现：" class="heading-link"><i class="fas fa-link"></i></a>原子性的实现：</h4>      <p>通过<code>undo log</code>实现，<code>undo log</code>也就是数据修改之前的值，一但发生异常就可以通过<code>undo log</code>恢复。</p>        <h4 id="一致性的实现："   >          <a href="#一致性的实现：" class="heading-link"><i class="fas fa-link"></i></a>一致性的实现：</h4>      <p>事务执行的 前后都是合法的数据状态。比如主键必须是唯一的，字段长度符合要求。但是除了数据提供的基础一致性，我们在操作时也要判断数据的合法性，比如：表中金额为20，操作时再减去100变成-80，这就不合法。</p>        <h4 id="隔离性的实现："   >          <a href="#隔离性的实现：" class="heading-link"><i class="fas fa-link"></i></a>隔离性的实现：</h4>      <p>通过<code>mvcc</code>（基于快照）和<code>LBCC</code>（基于锁，表锁行锁）实现</p>        <h4 id="持久性的实现："   >          <a href="#持久性的实现：" class="heading-link"><i class="fas fa-link"></i></a>持久性的实现：</h4>      <p>通过<code>redo log</code>（灾难恢复）和<code>double write</code>（页数据双写）双写缓冲来实现，<code>redo log</code>默认存放在<code>/var/lib/mysql/</code>目录中，默认一个48M</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'innodb_log%'</span>; 查看</span><br><span class="line">innodb_log_file_size  <span class="comment"># 指定每个文件的大小，默认 48M</span></span><br><span class="line">innodb_log_files_in_group <span class="comment"># 指定文件的数量，默认为 2</span></span><br><span class="line">innodb_log_group_home_dir <span class="comment"># 指定文件所在路径，相对或绝对。如果不指定，则为 datadir 路径。</span></span><br></pre></td></tr></table></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ACID&quot;   &gt;
          &lt;a href=&quot;#ACID&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;ACID&lt;/h3&gt;
      &lt;p&gt;ACID我们大家都知道，面试官也经常问到：&lt;/p&gt;
&lt;p&gt;不就是 原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation)、持久性(Durability) 嘛！&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="MySQL" scheme="https://nephelo-xyz.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Start</title>
    <link href="https://nephelo-xyz.github.io/2019/01/01/Start/"/>
    <id>https://nephelo-xyz.github.io/2019/01/01/Start/</id>
    <published>2019-01-01T12:46:25.000Z</published>
    <updated>2020-08-07T06:23:00.492Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>不管怎么说，希望是一个美好的开始！！</strong></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;不管怎么说，希望是一个美好的开始！！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
